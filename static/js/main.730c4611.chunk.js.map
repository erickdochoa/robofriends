{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","components/CounterButton.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","console","log","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","Header","nextProps","nextState","Component","CounterButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","color","onClick","App","onSearchChange","event","target","value","onRequestRobots","_this$props","searchField","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_CounterButton","components_SearchBox","components_Scroll","components_CardList","connect","searchRobots","requestRobots","error","dispatch","text","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","intialStateSearch","intialStateRobots","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.730c4611.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('CardList');\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  console.log('SearchBox');\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n    render() {\n        console.log('headur');\n        return <h1 className='f1'>RoboFriends</h1>;\n    }\n\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return true\n    }\n\n    updateCount = () => {\n        this.setState( state => {\n            return {count: state.count + 1}\n        })\n    }\n\n    render() {\n        console.log('CounterButton');\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>\n                count: {this.state.count}\n            </button>\n        )\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport CounterButton from '../components/CounterButton';\nimport './App.css';\n\nimport {setSearchField,requestRobots} from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  } \n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots,  isPending} = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <Header />\n          <CounterButton color='red'/>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED    \n} from './constants.js';\n\nexport const setSearchField = (text) => {\n    console.log(text);\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text // data to be sent to reducer\n    }\n}\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n      .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED    \n} from './constants.js';\n\n\nconst intialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=intialStateSearch, action = {}) => {\n    console.log(action.type)\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({},state,{searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst intialStateRobots = {\n    isPending: false,\n    robots: [],\n    error:''\n}\n\nexport const requestRobots = (state=intialStateRobots, action = {}) => {\n    console.log(action.type)\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({},state,{isPending: true});\n\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({},state,{robots: action.payload, isPending: false});    \n        \n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({},state,{error: action.payload, isPending: false});\n\n        default:\n            return state; \n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'; \nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\n\nconst store = createStore(rootReducer , applyMiddleware(thunkMiddleware));\n\nReactDOM.render(<Provider store = {store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}